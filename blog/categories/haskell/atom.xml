<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Haskell | Snowmantw's Blog]]></title>
  <link href="http://snowmantw.github.com/blog/categories/haskell/atom.xml" rel="self"/>
  <link href="http://snowmantw.github.com/"/>
  <updated>2012-09-25T22:11:34+08:00</updated>
  <id>http://snowmantw.github.com/</id>
  <author>
    <name><![CDATA[snowmantw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Note: Yesod Web Framework #1]]></title>
    <link href="http://snowmantw.github.com/blog/2012/09/19/note-yesod-web-framework-1/"/>
    <updated>2012-09-19T13:19:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/09/19/note-yesod-web-framework-1</id>
    <content type="html"><![CDATA[<h2>Foundation.hs</h2>

<ul>
<li>Foundation.hs 提供載入資源，以及變成內部資源參照值的函式。</li>
<li>該檔案中有分為 Route 、基本核心、儲存機制、認證等界面可以自訂，以此定義出應用本身所需要的各資源模組</li>
<li>Route 是呼叫特定函式，載入 Route 檔案並建立出 AppRoute</li>
<li>基本核心包括 Session 後端組件、如何渲染頁面 Widget 、Static 檔案設定等</li>
<li>Widget 應該說是子頁面，最終要併到 default-layout-wrapper 這種 Wrapper 的樣板檔中</li>
<li>RenderMessage 是用來把一些預設訊息渲染出來，包括處理 i18n 之類議題的設定 Type Class</li>
</ul>


<h2>Application.hs</h2>

<ul>
<li>此檔案將建立整個應用</li>
<li>Handler 也是註冊在這邊。Cabal 檔裡也要記得增加</li>
<li>其中 makeFoundation 與 makeApplication 將會分別建立資源參照與 WAI 應用，而後者會相依前者。</li>
<li>makeApplication 另外還會被 main 函式所直接呼叫</li>
<li>mkYesodDispatch 會建立應用實體，是繼 mkYesodData 所建立好資料後，繼續接手的程式。這個函式也是實際上會建立 YesodSite 的函式。</li>
<li>從目前看到的只能說 mkYesodDispatch 建立網站本身，makeApplication 建立整個 WAI 應用。( WAI: Web Server 與 Application 的介面<a href="http://www.yesodweb.com/book/web-application-interface" title="Yesod Official Site">^1</a> )</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Introduction to Haskell Components]]></title>
    <link href="http://snowmantw.github.com/blog/2012/07/14/an-introduction-to-haskell-components/"/>
    <updated>2012-07-14T09:10:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/07/14/an-introduction-to-haskell-components</id>
    <content type="html"><![CDATA[<p>這是我於 <a href="http://registrano.com/events/fpug-sig-1">Functional Programming SIG #1</a> 中介紹 <a href="http://www.haskell.org/haskellwiki/Typeclassopedia#Monad">Monad</a> 、 <a href="http://www.haskell.org/haskellwiki/Typeclassopedia#Arrow">Arrow</a> 與
其他 Haskell 運算元件的簡報。分為 <a href="https://docs.google.com/open?id=0BzqwG7n2gs71blE5V2pzR29WUDQ">PDF</a> 與 <a href="https://docs.google.com/open?id=0BzqwG7n2gs71ek9LTDBPczZPSjA">MS 2007</a> 檔案格式，採用 <a href="http://creativecommons.org/licenses/by-nc-sa/2.5/tw/">CC BY-NC-SA</a> 方式授權。</p>

<iframe src="https://docs.google.com/file/d/0BzqwG7n2gs71ek9LTDBPczZPSjA/preview" width="640" height="480"></iframe>




<br/>


<p>最近正在了解 <a href="http://www.haskell.org/haskellwiki/Functional_Reactive_Programming">Functional Reactive Programming</a> ，過程中很多細節要思考。
希望了解後可以更好的開發 Haskell 應用程式。</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Snowmantw's Blog]]></title>
  <link href="http://snowmantw.github.com/atom.xml" rel="self"/>
  <link href="http://snowmantw.github.com/"/>
  <updated>2012-06-22T22:23:00+08:00</updated>
  <id>http://snowmantw.github.com/</id>
  <author>
    <name><![CDATA[snowmantw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Reading: Applying hardware testing concepts to software]]></title>
    <link href="http://snowmantw.github.com/blog/2012/06/22/reading-applying-hardware-testing-concepts-to-software/"/>
    <updated>2012-06-22T22:13:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/06/22/reading-applying-hardware-testing-concepts-to-software</id>
    <content type="html"><![CDATA[<p><a href="http://www.dodgycoder.net/2012/06/applying-hardware-testing-concepts-to.html">這篇文章</a>講述作者自己測試 GUI 程式的經驗，
他覺得軟體的測試在時間長度的概念上可以借鑒硬體的測試概念分三種時間相關的測試概念</p>

<ol>
<li>短：功能性測試，包括 Unit Testing 與 Integration Testing。這邊可以除去絕大部分的問題。</li>
<li>中：用來測試與減少隨機錯誤。隨機錯誤不太可能完全清除，但可以儘量減少、消除到機率合乎標準</li>
<li>長：將軟體執行到超乎一般時間的長，用來測試諸如記憶體洩漏、效能下降等問題。

<pre><code>   作者自己的經驗是他的程式一般只會開半小時，他故意開著兩個小時作測試，
   然後在第一個小時時就發現了記憶體洩漏與效能下降的問題，並修正之。
</code></pre></li>
</ol>


<p>其他概念可以上作者文章看；他那張引自 <a href="http://upload.wikimedia.org/wikipedia/commons/6/6e/Bathtub_curve.jpg">wikipedia</a> 的圖還蠻好的</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/6/6e/Bathtub_curve.jpg" alt="Bathub curve about testing" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helloween Documents Re-reading]]></title>
    <link href="http://snowmantw.github.com/blog/2012/06/22/helloween-documents-re-reading/"/>
    <updated>2012-06-22T21:31:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/06/22/helloween-documents-re-reading</id>
    <content type="html"><![CDATA[<p>這篇算是舊文章了。所謂的萬聖節文件，是在 <a href="http://reocities.com/heartland/village/9328/halloween.html">1998 年時從微軟內部洩漏的一份文件</a>，其中</p>

<pre><code>披漏了微軟總部Redmond, 在未來預備對付Linux及開放性原始碼軟體的策略, 
消息來源希望保密. 我為這份文件在萬聖節其間做了些註解
</code></pre>

<p>這邊所謂的「我」指的是 Eric S. Raymond ，Open Source 界的大老。</p>

<p>這份文件揭露了封閉的微軟是如何既錯誤又正確的看待 OSS ，以及其如何「準備」削弱與摧毀 OSS。</p>

<p>讓我感慨的是過了這麼多年，OSS 還是受到許許多多的威脅。而今更享有自由的 OSS 開發者與受益的使用者，
是否真的重視如今的自由呢？看 Apple 那樣的封閉開發者市場，developer 與 user 卻不是很在意。又像 Facebook ，
本身就是一個封閉的巨大論壇，開發與使用者一樣不在意。（連搜尋也無法搜到資訊！這也是我厭惡的地方。
更糟糕的是現在有些服務會認為每個人都會有，因此只提供 Facebook 服務的公開資訊。
相較之下網頁與 Mail 至少是公開的，我可以用 Gmail/Hotmail/學校信箱/自己架&#8230;）</p>

<p>身為一個學習者，受益於 OSS 界眾多的時候，也應該思考像這樣的理念之爭，尤其是會真槍實彈影響到每個人的自由時，
自己該怎樣思考、怎麼去作。又回來看看，各資訊學系的同學是否又真正了解這些重要的問題？</p>

<p>參考文章</p>

<ul>
<li><a href="http://www.gnu.org/philosophy/free-software-for-freedom.html">自由軟體，不只是開放源碼</a> ：Open Source != Free Software != Freesoftware</li>
<li><a href="http://inspire.twgg.org/c/internet/trends/comparison-of-five-kinds-of-standard-open-source-license-bsd-apache-gpl-lgpl-mit.html">五種開源授權規範的比較</a> (BSD, Apache, GPL, LGPL, MIT)</li>
<li><a href="http://easylearn.bhes.ntpc.edu.tw/high/xvid_history.htm">Xvid 的歷史與特點</a>：divx 如何「剽竊」OSS 開發者的心血，以及使用自由而非僅僅是 Open Source 許可證有多重要</li>
<li><a href="http://blog.tenyi.com/2008/04/blog-post_23.html">東芝微軟戰記</a>：一篇很有名的文章，講述作者為了退掉微軟稅花了多大苦工 ( 轉自鳥毅 Blog )</li>
</ul>


<p>最後引用 <a href="http://en.wikipedia.org/wiki/Martin_Niem%C3%B6ller">Martin Niemöller</a> 牧師很有名的一段懺悔文作結</p>

<p>「起初他們追殺共產主義者」</p>

<p>當納粹追殺共產主義者<br/>
我保持沉默<br/>
——我不是共產主義者<br/>
當他們追殺社會民主主義者<br/>
我保持沉默<br/>
——我不是社會民主主義者<br/>
當他們追殺工會成員<br/>
我沒站出來說話<br/>
——我不是工會成員<br/>
當他們追殺猶太人<br/>
我保持沉默<br/>
——我不是猶太人<br/>
當他們要追殺我<br/>
再也沒有人為我說話了<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet Another Coder]]></title>
    <link href="http://snowmantw.github.com/blog/2012/06/17/yet-another-coder/"/>
    <updated>2012-06-17T15:07:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/06/17/yet-another-coder</id>
    <content type="html"><![CDATA[<h2>Profile</h2>

<h3>snowmantw ( Greg Weng )</h3>

<pre><code>✝  Christian
:  Vimmer
/  Linux User
λ  Haskell Learner
G  Self-Studier
$  Javascript Developer
@  snowmantw at gmail.com  
✎  Literure Fan  
♪  Classical Music Fan
✍  Master's Degree Student → Dept. of Computer Science, NCCU  
台  Taiwanese
</code></pre>

<hr />

<h2>Public Projects:</h2>

<ul>
<li><a href="https://github.com/snowmantw/FunTang">FunTang</a>  : functional features added CoffeeScript</li>
<li><a href="https://github.com/snowmantw/Fluorine">Fluorine</a> : Arrow in Javascript with fully event-driven features</li>
</ul>


<hr />

<h2>Favorite Books:</h2>

<ul>
<li>Nineteen Eighty-Four by George Orwell</li>
<li>A Song of Ice and Fire by George R. R. Martin</li>
<li>The Chronicles of Narnia by C.S. Lewis</li>
<li>銀河英雄伝説 by 田中芳樹</li>
<li>萬曆十五年 by 黃仁宇</li>
<li>翻譯者 by 賴香吟 ( 中篇小說 )</li>
<li>銃夢 by 木城ゆきと</li>
<li>風の谷のナウシカ by 宮崎駿</li>
</ul>

]]></content>
  </entry>
  
</feed>

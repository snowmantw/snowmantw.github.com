<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Snowmantw's Blog]]></title>
  <link href="http://snowmantw.github.com/atom.xml" rel="self"/>
  <link href="http://snowmantw.github.com/"/>
  <updated>2012-09-25T22:11:34+08:00</updated>
  <id>http://snowmantw.github.com/</id>
  <author>
    <name><![CDATA[snowmantw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Note: Compiler Design #2]]></title>
    <link href="http://snowmantw.github.com/blog/2012/09/25/note-compiler-design-number-2/"/>
    <updated>2012-09-25T21:57:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/09/25/note-compiler-design-number-2</id>
    <content type="html"><![CDATA[<p><strong>原稿遺失</strong>，補記一些重點</p>

<ul>
<li>Lexeme: 語法剖析的元素</li>
<li>語法剖析出來的 Token 代表 key/value ，即是該 Lexeme 屬於那一類 Token ，其值為何</li>
<li>Identifier 就是一大類 Token 。而如 IntegerConstant 那樣，可能會有很多類中有很多種值</li>
<li><p>Keyword/Reserved Word 差異：前者有先定義但可重載；後者不可重載</p></li>
<li><p>Formal Language 就是研究這些 Lexeme 對應到的類別之間關係</p></li>
<li>單字構成字串，字串符合文法者稱之句子。所有（有可能無限可數）句子構成語言</li>
<li>Formal Language 的規則確保所建構出來的語言，針對任意字串都是可決定其是否為句子的</li>
<li><p>Regexp 用以從文法建構出句子；而 Compiler 則是從句子辨認出文法</p></li>
<li><p>自動狀態機分為確定與不確定。兩者的差異在於其中的狀態移轉，是否存在同輸入而多個可能移轉的狀態</p></li>
<li>確定的版本，雖然可以允許有多個結束狀態，但一定要在輸入全部使用完畢時達到結束狀態，才算完成</li>
<li>不確定者，其遇到輸入有多個可能移轉時，要「執行」全部可能的移轉。而只要其中一個到達結束狀態時輸入也剛好完畢，就算成功</li>
<li>前者所述，如果其中一個移轉到達結束狀態，但輸入還未完畢，其他可移轉者要繼續移轉</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note: Seminar -  Location Service Protocols for Vehicular Ad Hoc Networks Abstract]]></title>
    <link href="http://snowmantw.github.com/blog/2012/09/20/note-seminar-location-service-protocols-for-vehicular-ad-hoc-networks-abstract/"/>
    <updated>2012-09-20T15:10:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/09/20/note-seminar-location-service-protocols-for-vehicular-ad-hoc-networks-abstract</id>
    <content type="html"><![CDATA[<p>演講人：世新大學 許智順教授</p>

<ul>
<li>車載通訊網路的研究</li>
<li>MANET, VANET, VANET+Coast Location Service Protocols</li>
<li>MANET 是比較早出現的。與 VANET 不太一樣</li>
<li>Location Service 是指知道別人位置並以知通訊</li>
<li>基本的車子需要有各種感測器，然後把這些感測器的訊息連接到處理中心，再與伺服器連結</li>
<li>Ad Hoc Network ：車載隨意網路，包括車間通訊與 Roadside 基地台。放在道路旁邊，負責與網際網路作通訊</li>
<li>也可以在距離過遠時，以車間通訊作中介，間接的連上Roadside 基地台</li>
<li><p>V2V, V2R 就是這兩種網路。OBU 是車載單元，RSU 是基地台單元</p></li>
<li><p>一個重點是支援智慧型的運輸系統</p></li>
<li>GPCR 在知道目的地時，使用貪婪策略往一個個最靠近之節點作一步步導航往前。這問題是有可能有突出的分岔節點造成有一部份是要往回走，浪費該分枝</li>
<li>GPSR 因此是先到交叉點，然後在交叉點再做決策</li>
<li>Geocast 是指把訊息送到特定區域。這邊有像網路那種 Unicast, Boardcast。只是 Geocast 加上了地理區域的概念。現在是要傳給該區域中的所以節點</li>
<li><p>例如可以將事故位置的資訊傳給在附近位置的車輛</p></li>
<li><p>MANET 的協定介紹</p></li>
<li>GLS 是把地理區域化成小方格，小格又成大格，因此 Location Server 會去以「比該小格 Id 大，又離其最近的小格中 Sever 作為挑選」</li>
<li>對該大格以外的其他格，就只要一大格選一個 Location Server ，該使用者就可以以遠近決定減少或增加使用的 Location Server 密度</li>
<li>如果都以小格為單位，這樣一個使用者使用的 Location Server 過多，更新資料時成本過大</li>
<li><p>每個 Location Server 都會有目前知道位置資訊的節點。每一個 Location Server 會往外查詢直到取得了想要取得的資訊</p></li>
<li><p>另一種是超級節點概念：車節點中有些是超級節點，因此以線為準，線中間的超級節點負責其周圍所有的通訊與資訊更新。如果其中子節點有必要與其他節點作溝通，
就可以透過這樣的線圖作網路線方式的傳遞</p></li>
<li><p>HLLS：歷史資訊為準。如果要傳訊息到某個目的地，節點會以初始狀況為基準，紀錄其經過路線，往其路線上剛好有的節點做成傳送路線</p></li>
<li><p>HLS：階層概念，做成六腳蜂格網路。然後以階層為主一層層往上往外傳。只要該網格中有點，該點就會被臨時挑出作為中介點。這樣每一層區域擴大，點每層只有一個。
但這樣每個節點都必須知道其他節點的更新情況。而詢問訊息相反，是從自己開始往最高層一路降下去傳到基本網格，才到節點</p></li>
<li><p>VANET 與 MANET 差別在於，前者是車輛，後者大部分是行人（Mobile Device）。VANET 維持連線方面更困難，但車輛會以道路形狀為主，所以比較規則</p></li>
<li><p>VNAET 協定介紹</p></li>
<li>VLS 是學之前 GLS 一樣切網格。網格現在會增加是否有道路的資訊，即是以該格內的道路中選一點作為該格中 Locaton Server 的調整位置</li>
<li><p>這邊所謂 Location Server 是以車節點為主，因此有無道路很重要</p></li>
<li><p>Cache-Based 的則利用各時間點 T-delta 與零點位置的差異作資訊擴散。也就是隨著移動，大致會知道其附近資訊的車輛節點，這會逐漸形成擴散的圖。
也就是每個節點會按照移動時更新周圍節點，而隨著方向相反的節點資訊比較舊，移動前方向的資訊比較新，形成有方向差異的節點群，因此資訊的發送就會逐漸逼近目標。找到後建立了 Routing</p></li>
<li><p>RLSMP：一樣把區域切成不同格，各格構成叢集。叢集中間則是該叢集中的節點位置資訊。要知道資訊時，則向該區域中間的節點 LSC 詢問，更新也一起往中間送</p></li>
<li><p>Location Server 面對著密度與成本的背反。因此需要找到一個最有效率的方式佈署 Location Server</p></li>
<li>假設在程式中，每個車輛都有導航與傳訊的能力，會先切成方格，然後也有階層</li>
<li>差異在於 Locatin Server 分成 Local Location Server 與 Dedicated Location Server 。前者會是目前所在位置的 Location Server ，因此節點可以就近詢問</li>
<li>Dedicated Location Server 則是按照區域分群，選定該區域節點應該被哪個 Location Server 服務</li>
<li>所以分群的概念也是很重要的</li>
<li>而還可以以 Cost Functions 計算，看要分多少群，以及要有多少台 Location Server</li>
<li><p>透過 Local/Dedicated Location Server 作道路為主的 MST 計算就可以找到通訊路線</p></li>
<li><p>更新資訊的時間是很重要的：計算更新與不更新，何者成本高，因此歷史資訊會很重要</p></li>
<li>也就是預估未知與實際位置不準的差異</li>
<li>最主要就是提出了 Cost 為主的考量，在 Update 方面勝過既有的方案，但 Query 比較不如</li>
<li>另外就是以現代的條件，有如此模組的車輛可能不夠形成可用的網路</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note: Cmake Learning #1]]></title>
    <link href="http://snowmantw.github.com/blog/2012/09/19/note-cmake-learning-number-1/"/>
    <updated>2012-09-19T20:32:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/09/19/note-cmake-learning-number-1</id>
    <content type="html"><![CDATA[<ul>
<li>參考資源

<ul>
<li><a href="http://zh.wikibooks.org/wiki/CMake_%E5%85%A5%E9%96%80">Cmake 入門</a></li>
<li><a href="http://www.cmake.org/cmake/help/v2.8.8/cmake.html#section_Commands">Cmake 官方網站：命令列表</a></li>
</ul>
</li>
</ul>


<hr />

<ul>
<li>如果要尋找系統中有沒有特定函式庫，首先要確定有該函式庫的模組。可用 <code>cmake --help-module-list</code> 協助尋找是否該模組存在</li>
<li>如果有該模組，可以用 <code>find_package</code> 命令去找。注意該命令給定的名字必須符合前述搜尋模組給的名字，而不是系統中套件名稱。例如</li>
</ul>


<pre>
     # Find GLUT package in system. 
     # Not system package name like "freeglut3-dev".
     find_package (GLUT REQUIRED) 
</pre>


<ul>
<li>如果要作不符合條件即中斷 Cmake 執行，可以使用 <code>message(FATAL_ERROR "&lt;message&gt;")</code> 的方式印出錯誤後中止執行。
例如前述尋找系統套件，找不到就可以用這種方式報錯離開</li>
</ul>


<hr />

<ul>
<li><code>target_link_library</code> 是該 Cmake 所針對的編譯單元，需要連結哪些函式庫</li>
<li><code>add_library</code> 則是把該編譯單元包成函式庫，兩者目的相關方向相反</li>
<li><code>target_link_library</code> 可以指定編譯器連結參數，例如</li>
</ul>


<pre>
     # Require compiler compiling with these arguments.
     target_link_libraries(CGHW1 -lGL -lglut -lGLU)
</pre>


<ul>
<li>這邊的連結參數會影響產生的 Makefile 中所下參數，所以是必要的</li>
<li><code>include_directory</code> 是指定該次編譯尋找引入檔的目錄路徑（不知道非 C 類是否適用這概念？）</li>
<li><code>add_subdirectory</code> 則是指定要遞回進子目錄，先作該 CMake 再回來</li>
<li>有些屬性要自己隨著目錄結構而設定，例如 <code>IMPORTED_LOCATION</code> 就關係到產生函式庫後擺放檔案的位置</li>
</ul>


<hr />

<ul>
<li>Cmake 2.8 還是需要在 <code>else</code> 這個關鍵字後面接上條件的樣子。不能如前面那樣省略，而是必需變成 <code>else(&lt;condition&gt;)</code></li>
<li>推薦使用所謂 &#8220;Out-of-source Build&#8221; ，將建置目錄與原始碼目錄分開</li>
<li>Cmake 執行時指定目錄，會自動找尋其中是否有 CMakeLists.txt 並利用執行</li>
<li>Cmake 範例的結構中，看起來是每個模組或其他編譯單元的目錄中都各有一個 CMakeLists.txt ，整個專案再一個。
例如「Cmake 入門」中的<a href="http://zh.wikibooks.org/wiki/CMake_%E5%85%A5%E9%96%80/%E5%BB%BA%E7%BD%AE%E8%88%87%E9%80%A3%E7%B5%90%E7%A8%8B%E5%BC%8F%E5%BA%AB">範例</a>:</li>
</ul>


<pre>
    lib1/
        src/
            app/
                CMakeLists.txt
                main.c
            calc/
                CMakeLists.txt
                calc.c
                calc.h
    CMakeLists.txt
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note: Yesod Web Framework #1]]></title>
    <link href="http://snowmantw.github.com/blog/2012/09/19/note-yesod-web-framework-1/"/>
    <updated>2012-09-19T13:19:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/09/19/note-yesod-web-framework-1</id>
    <content type="html"><![CDATA[<h2>Foundation.hs</h2>

<ul>
<li>Foundation.hs 提供載入資源，以及變成內部資源參照值的函式。</li>
<li>該檔案中有分為 Route 、基本核心、儲存機制、認證等界面可以自訂，以此定義出應用本身所需要的各資源模組</li>
<li>Route 是呼叫特定函式，載入 Route 檔案並建立出 AppRoute</li>
<li>基本核心包括 Session 後端組件、如何渲染頁面 Widget 、Static 檔案設定等</li>
<li>Widget 應該說是子頁面，最終要併到 default-layout-wrapper 這種 Wrapper 的樣板檔中</li>
<li>RenderMessage 是用來把一些預設訊息渲染出來，包括處理 i18n 之類議題的設定 Type Class</li>
</ul>


<h2>Application.hs</h2>

<ul>
<li>此檔案將建立整個應用</li>
<li>Handler 也是註冊在這邊。Cabal 檔裡也要記得增加</li>
<li>其中 makeFoundation 與 makeApplication 將會分別建立資源參照與 WAI 應用，而後者會相依前者。</li>
<li>makeApplication 另外還會被 main 函式所直接呼叫</li>
<li>mkYesodDispatch 會建立應用實體，是繼 mkYesodData 所建立好資料後，繼續接手的程式。這個函式也是實際上會建立 YesodSite 的函式。</li>
<li>從目前看到的只能說 mkYesodDispatch 建立網站本身，makeApplication 建立整個 WAI 應用。( WAI: Web Server 與 Application 的介面<a href="http://www.yesodweb.com/book/web-application-interface" title="Yesod Official Site">^1</a> )</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note: Computer Graphics #1]]></title>
    <link href="http://snowmantw.github.com/blog/2012/09/19/note-computer-graphics-number-1/"/>
    <updated>2012-09-19T13:11:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/09/19/note-computer-graphics-number-1</id>
    <content type="html"><![CDATA[<ul>
<li>Shading 是指在面與線的基礎上增加了光線與材質的交互作用層</li>
<li>Texture 則是加在表面呈現出材質的效果</li>
<li>Framebuffer 記憶體將儲存運算後的資料，然後顯示器朝之要這些資料並畫出來</li>
<li>Framebuffer 如何更新是重點之一</li>
<li>Model-Rendering-Animation 是三個領域</li>
<li>Pixel 對記憶體就是位元組。比如 4 Bytes 對應到 32 萬色的一個像素</li>
<li>如果沒有 Shading ，每個面都會同色同光。加上去後才有光影立體的感覺</li>
<li>Shadow 與 Reflection 則是後面的工作</li>
</ul>


<hr />

<ul>
<li>Rendering Pipline ：平行處理</li>
<li>轉換觀點：Transformation ，去以相機為準變換整個影像</li>
<li>Transformer &#8211;> Clipper &#8211;> Projector &#8211;> Rasterizer &#8211;> Pixels</li>
<li>Transformer 是幾何轉換</li>
<li>Clipper 把不在視覺中的物體遮掉不顯示</li>
<li>Rasterizer 從幾何轉換成像素觀點（從平面頂點變為描述哪些像素要被填滿）</li>
<li>Shading 還在後面。不過為了效率，會在過程中作</li>
</ul>


<hr />

<ul>
<li>Global Illumination ：全環境中的光線軌跡。包括散射之類的議題。</li>
<li>物理光學以外，還有一種是繪圖風格的渲染方式</li>
</ul>


<hr />

<ul>
<li>課程會把 OpenGL 核心功能實做一次</li>
<li>根據老師的提醒，OpenGL 矩陣存到記憶體順序是 Column Major 。代表順序是從左上開始往下數，最後面是最右下。因此</li>
</ul>


<pre>
    M[16] == {0,1,2,3,4,5,6,7}

    [ 0  4
      1  5
      2  6
      3  7 ]
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[An Introduction to Haskell Components]]></title>
    <link href="http://snowmantw.github.com/blog/2012/07/14/an-introduction-to-haskell-components/"/>
    <updated>2012-07-14T09:10:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/07/14/an-introduction-to-haskell-components</id>
    <content type="html"><![CDATA[<p>這是我於 <a href="http://registrano.com/events/fpug-sig-1">Functional Programming SIG #1</a> 中介紹 <a href="http://www.haskell.org/haskellwiki/Typeclassopedia#Monad">Monad</a> 、 <a href="http://www.haskell.org/haskellwiki/Typeclassopedia#Arrow">Arrow</a> 與
其他 Haskell 運算元件的簡報。分為 <a href="https://docs.google.com/open?id=0BzqwG7n2gs71blE5V2pzR29WUDQ">PDF</a> 與 <a href="https://docs.google.com/open?id=0BzqwG7n2gs71ek9LTDBPczZPSjA">MS 2007</a> 檔案格式，採用 <a href="http://creativecommons.org/licenses/by-nc-sa/2.5/tw/">CC BY-NC-SA</a> 方式授權。</p>

<iframe src="https://docs.google.com/file/d/0BzqwG7n2gs71ek9LTDBPczZPSjA/preview" width="640" height="480"></iframe>




<br/>


<p>最近正在了解 <a href="http://www.haskell.org/haskellwiki/Functional_Reactive_Programming">Functional Reactive Programming</a> ，過程中很多細節要思考。
希望了解後可以更好的開發 Haskell 應用程式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FWD: I Feel Sorry For Computer Science Departments]]></title>
    <link href="http://snowmantw.github.com/blog/2012/06/23/fwd-i-feel-sorry-for-computer-science-departments/"/>
    <updated>2012-06-23T17:13:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/06/23/fwd-i-feel-sorry-for-computer-science-departments</id>
    <content type="html"><![CDATA[<p><a href="http://programming-puzzler.blogspot.co.uk/2012/06/i-feel-sorry-for-computer.html">這篇文章</a>講述了作者 <a href="http://www.blogger.com/profile/05992502488191304160">Mark Engelberg</a> 覺得目前 (美國？) 的 CS 教育，遠不夠讓一個人從四年的大學教育去專精於 CS 領域。</p>

<p><em>重點摘錄：CS 教育應該要從大學以前就開始，因為四年遠不夠讓人專精於 CS 領域。尤其是大學以前的數學教育，
都強調於微積分相關的學習，這應該要被扭轉成教導離散數學為重心。另外也要提供學生及早開始接觸 programming 的機會。</em></p>

<pre><code>Colleges have 4 years to try to instill some meaningful level of 
expertise in students, but that's simply not enough time.
</code></pre>

<p>這個問題對 CS 系所來講是嚴肅的抉擇問題：到底課程要專注在我們認為一個 CS 人應該有修為這個遠景上，
還是教學專注在職業會用到的技能上？</p>

<pre><code>... do we focus on foundational skills and the big picture of 
what computer science is all about, or do we focus on technical training to 
try to produce graduates who have skills with immediate appeal to companies? 
</code></pre>

<p>作者還提到公司為何會對學校失望：他們希望雇用的是剛好可以勝任該職務技能的人。但因為這個目標無法達成，
所以它們轉找最「聰明」的人，也就是可以最快上手的人。但對 CS 這門學科而言，類似於學位這樣的指標也很難切合這樣的要求。
雖然畢業名校這點，對於它們想要尋找有天賦之人比較有幫助。</p>

<pre><code>More often than not, the knowledge gained from a CS education is 
viewed by companies as being so insufficient as to be almost irrelevant – nevertheless, 
graduating from a well-known school can be seen as a kind of proxy for the kind of 
drive and innate smarts they really are looking for.
</code></pre>

<p>作者又講到其他系所應該也會有這類問題。但在這點上， CS 到底有何不同？作者認為最關鍵的一點在於
其他學科的知識多少從小學就開始接觸，但 CS 所要學習的卻缺席於大學以前的教育中。</p>

<pre><code>How do other departments solve this problem? 

Well, many domains are able to leverage the significant number of years
that students have already invested in grade school in English, math, and science.
</code></pre>

<p>以數學為例，很不幸的是，作者認為 CS 最重要的是離散數學，但這卻與大學以前的教育方針相反。
作者還提到學習微積分其實與 CS 最迫切需要的數學是最無關的科目。而對大學以前的教育卻往往強調在微積分相關的學習上。</p>

<pre><code>Calculus, the pinnacle of grade school math education as it is currently structured, 
is the least relevant type of math for computer scientists. 

Computer scientists need a strong background in Discrete Math and these topics are poorly 
covered in grade school, if at all.
</code></pre>

<p>同時在作者心中，即使在教育很好的地區，對於讓學生提早接觸 programming 的機會也是非常貧乏的</p>

<pre><code>... most places probably have it much worse in terms of providing 
kids with early exposure to programming.
</code></pre>

<p>要解決這個問題，很明顯的，只有提供更長遠的解決方式。這包括延長大學的畢業年限，或是相反，
讓程式設計相關的課程提早深入大學以下的學制中。</p>

<pre><code>Once the problem has been laid bare like this – four years provides insufficient 
preparation for a career in computer science – it is obvious that there are only 
a couple long-term solutions.

One possibility is to extend the duration of CS education, 
another possibility is to incorporate more CS topics and exposure to 
programming into the grade school curriculum.
</code></pre>

<p>作者也提到為何要迫切提高程式設計的專精度：他認為程式設計將是社會上很重要的一種基礎技能，提高整體程式水平將可以使社會受益</p>

<pre><code>I think a strong case can be made that our society would benefit from more CS in grade school
</code></pre>

<p>並且在 TED 大會上，另一位人士也提到了提高離散數學的重要性</p>

<pre><code>Arthur Benjamin makes the case in his TED talk that discrete math (logic, statistics, etc.) 
is far more relevant to most walks of life than, say, calculus.
</code></pre>

<p>不過作者最後講了，即使我們都做到了這點，另一個更難的問題：尋找更多夠格的老師，要怎樣解決？</p>

<pre><code>... how do you go about finding and recruiting qualified teachers? 
</code></pre>

<p>我想對於老是喊著資訊國力之類的政府，應該要抉擇：軟體產業需要更多的投入與堅持。
也許我們應該減少專注於，或說實在一點是排擠於大學、高中課程中非程式軟體相關的科目。
除非我們學制也要開始建構真正的技術類學習，分於普通學習之途。</p>

<p>然而更重要的應該是並認清硬體方式的生產有其極限，
而軟體產業可能是未來一大重點。然而軟體產業絕非如硬體那樣砸錢砸人數，以及其他資本就可以搞定。
畢竟大規模的「擴產」對軟體而言可能反是阻力。加上軟體的開發牽涉到台灣企業與政府最缺乏的耐心與人本思維，
要成熟可能是忍受虧損或無收入一段長時間後才能看到成果。
且對軟體設計者不能像硬體那樣靠著工業製造甚至軍隊的管理方式對待。</p>

<p>這些種種可能都是習慣於生產製造思維的政府與工業會被迫殘酷的轉型，或是殘酷的死亡之絆腳石。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reading: Applying hardware testing concepts to software]]></title>
    <link href="http://snowmantw.github.com/blog/2012/06/22/reading-applying-hardware-testing-concepts-to-software/"/>
    <updated>2012-06-22T22:13:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/06/22/reading-applying-hardware-testing-concepts-to-software</id>
    <content type="html"><![CDATA[<p><a href="http://www.dodgycoder.net/2012/06/applying-hardware-testing-concepts-to.html">這篇文章</a>講述作者 <a href="http://www.blogger.com/profile/14418022725678218844">Dodgy_Coder</a> 自己測試 GUI 程式的經驗，
他覺得軟體的測試在時間長度的概念上可以借鑒硬體的測試概念分三種時間相關的測試概念</p>

<ol>
<li>短：功能性測試，包括 Unit Testing 與 Integration Testing。這邊可以除去絕大部分的問題。</li>
<li>中：用來測試與減少隨機錯誤。隨機錯誤不太可能完全清除，但可以儘量減少、消除到機率合乎標準</li>
<li>長：將軟體執行到超乎一般時間的長，用來測試諸如記憶體洩漏、效能下降等問題。</li>
</ol>


<p>作者自己的經驗是他的程式一般只會開半小時，他故意開著兩個小時作測試，
然後在第一個小時時就發現了記憶體洩漏與效能下降的問題，並修正之。</p>

<p>其他概念可以上作者文章看；他那張引自 <a href="http://upload.wikimedia.org/wikipedia/commons/6/6e/Bathtub_curve.jpg">wikipedia</a> 的圖還蠻好的</p>

<p><img src="http://upload.wikimedia.org/wikipedia/commons/6/6e/Bathtub_curve.jpg" alt="Bathub curve about testing" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Helloween Documents Re-reading]]></title>
    <link href="http://snowmantw.github.com/blog/2012/06/22/helloween-documents-re-reading/"/>
    <updated>2012-06-22T21:31:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/06/22/helloween-documents-re-reading</id>
    <content type="html"><![CDATA[<p>這篇算是舊文章了。所謂的萬聖節文件，是在 <a href="http://reocities.com/heartland/village/9328/halloween.html">1998 年時從微軟內部洩漏的一份文件</a>，其中</p>

<pre><code>披漏了微軟總部Redmond, 在未來預備對付Linux及開放性原始碼軟體的策略, 
消息來源希望保密. 我為這份文件在萬聖節其間做了些註解
</code></pre>

<p>這邊所謂的「我」指的是 Eric S. Raymond ，Open Source 界的大老。</p>

<p>這份文件揭露了封閉的微軟是如何既錯誤又正確的看待 OSS ，以及其如何「準備」削弱與摧毀 OSS。</p>

<p>讓我感慨的是過了這麼多年，OSS 還是受到許許多多的威脅。而今更享有自由的 OSS 開發者與受益的使用者，
是否真的重視如今的自由呢？看 Apple 那樣的封閉開發者市場，developer 與 user 卻不是很在意。又像 Facebook ，
本身就是一個封閉的巨大論壇，開發與使用者一樣不在意。（連搜尋也無法搜到資訊！這也是我厭惡的地方。
更糟糕的是現在有些服務會認為每個人都會有，因此只提供 Facebook 服務的公開資訊。
相較之下網頁與 Mail 至少是公開的，我可以用 Gmail/Hotmail/學校信箱/自己架&#8230;）</p>

<p>身為一個學習者，受益於 OSS 界眾多的時候，也應該思考像這樣的理念之爭，尤其是會真槍實彈影響到每個人的自由時，
自己該怎樣思考、怎麼去作。又回來看看，各資訊學系的同學是否又真正了解這些重要的問題？</p>

<p>參考文章</p>

<ul>
<li><a href="http://www.gnu.org/philosophy/free-software-for-freedom.html">自由軟體，不只是開放源碼</a> ：Open Source != Free Software != Freesoftware</li>
<li><a href="http://inspire.twgg.org/c/internet/trends/comparison-of-five-kinds-of-standard-open-source-license-bsd-apache-gpl-lgpl-mit.html">五種開源授權規範的比較</a> (BSD, Apache, GPL, LGPL, MIT)</li>
<li><a href="http://easylearn.bhes.ntpc.edu.tw/high/xvid_history.htm">Xvid 的歷史與特點</a>：divx 如何「剽竊」OSS 開發者的心血，以及使用自由而非僅僅是 Open Source 許可證有多重要</li>
<li><a href="http://blog.tenyi.com/2008/04/blog-post_23.html">東芝微軟戰記</a>：一篇很有名的文章，講述作者為了退掉微軟稅花了多大苦工 ( 轉自鳥毅 Blog )</li>
</ul>


<p>最後引用 <a href="http://en.wikipedia.org/wiki/Martin_Niem%C3%B6ller">Martin Niemöller</a> 牧師很有名的一段懺悔文作結</p>

<p>「起初他們追殺共產主義者」</p>

<p>當納粹追殺共產主義者<br/>
我保持沉默<br/>
——我不是共產主義者<br/>
當他們追殺社會民主主義者<br/>
我保持沉默<br/>
——我不是社會民主主義者<br/>
當他們追殺工會成員<br/>
我沒站出來說話<br/>
——我不是工會成員<br/>
當他們追殺猶太人<br/>
我保持沉默<br/>
——我不是猶太人<br/>
當他們要追殺我<br/>
再也沒有人為我說話了<br/></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yet Another Coder]]></title>
    <link href="http://snowmantw.github.com/blog/2012/06/17/yet-another-coder/"/>
    <updated>2012-06-17T15:07:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/06/17/yet-another-coder</id>
    <content type="html"><![CDATA[<h2>Profile</h2>

<h3>snowmantw ( Greg Weng )</h3>

<pre><code>✝  Christian
:  Vimmer
/  Linux User
λ  Haskell Learner
G  Self-Studier
$  Javascript Developer
@  snowmantw at gmail.com  
✎  Literure Fan  
♪  Classical Music Fan
✍  Master's Degree Student → Dept. of Computer Science, NCCU  
台  Taiwanese
</code></pre>

<hr />

<h2>Public Projects:</h2>

<ul>
<li><a href="https://github.com/snowmantw/FunTang">FunTang</a>  : functional features added CoffeeScript</li>
<li><a href="https://github.com/snowmantw/Fluorine">Fluorine</a> : Arrow in Javascript with fully event-driven features</li>
</ul>


<hr />

<h2>Favorite Books:</h2>

<ul>
<li>Nineteen Eighty-Four by George Orwell</li>
<li>A Song of Ice and Fire by George R. R. Martin</li>
<li>The Chronicles of Narnia by C.S. Lewis</li>
<li>銀河英雄伝説 by 田中芳樹</li>
<li>萬曆十五年 by 黃仁宇</li>
<li>翻譯者 by 賴香吟 ( 中篇小說 )</li>
<li>銃夢 by 木城ゆきと</li>
<li>風の谷のナウシカ by 宮崎駿</li>
</ul>

]]></content>
  </entry>
  
</feed>

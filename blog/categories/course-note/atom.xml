<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Course Note | Snowmantw's Blog]]></title>
  <link href="http://snowmantw.github.com/blog/categories/course-note/atom.xml" rel="self"/>
  <link href="http://snowmantw.github.com/"/>
  <updated>2012-10-01T23:54:10+08:00</updated>
  <id>http://snowmantw.github.com/</id>
  <author>
    <name><![CDATA[snowmantw]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Note: Computer Graphics #2]]></title>
    <link href="http://snowmantw.github.com/blog/2012/09/26/note-computer-graphics-number-2/"/>
    <updated>2012-09-26T13:10:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/09/26/note-computer-graphics-number-2</id>
    <content type="html"><![CDATA[<h2>OpenGL Programming 基本架構</h2>

<h3>座標系統詞彙</h3>

<ul>
<li>Clipping: 座標空間中所關注的立方區域，鏡頭唯一關注的區域</li>
<li>Viewpoint: 繪製的座標與視窗的座標映射。螢幕上的視窗系統透過 Viewpoint 提供了映射的方式</li>
<li>Project: 立體空間對視窗的投影</li>
<li>Mesh: Geometry</li>
</ul>


<h3>OpenGL 歷史</h3>

<ul>
<li>繪圖的工業標準，軟硬體接軌的機制</li>
<li>最初的版本是把硬體能作到的流程功能做成固定的功能，包括從頂點的立體物件資料，以及平面影像的像素資料，
作個別的修正後柵格化結合（頂點轉像素），最後處理到 Framebuffer</li>
<li>第二版後把頂點轉換 (Vertex Shader) 與像素貼圖 (Fragment Shader) 程式化。之前只能設定狀態並丟給硬體作。程式化代表可以對這些過程的方式套用自己的方式，
不用一定按照預設的硬體方式作</li>
<li>第三版引入了 Geometry Shader 。這個流程是位於 Vertex Shader 與 Fragment Shader 中間。另外則是開始有向後相容切割的概念，
即所謂 Full/Forward Compatible Context Type</li>
<li>第四版於 Geometry Shader 前又引入兩個流程：Tessellation-Control, Tessellation-Evaluation 。前者是曲線中間可以增加點，因此更細分平滑。
從這邊看出 OpenGL 支援的越多，以前要放出去交給 CPU 運算的部份，就可以用 GPU 去算，增加效能</li>
<li>幾何資料之後細化處理另一個好處是頂點資料可以相同數目，但效果更細緻，不會增加頻寬的需求</li>
<li>OpenGL - { OpenCL, WebGL, OpenGL ES }</li>
</ul>


<h3>OpenGL APIs</h3>

<ul>
<li>針對每個 OS 與視窗系統的接軌</li>
<li>GLU 是比起硬體平台上更抽象的，GLUT 則是跨平台的 Toolkit</li>
<li>命名慣例：<code>gl</code> 代表 OpenGL 提供的功能；<code>glu</code> 代表 GLU 提供</li>
<li>GL - GLU || OS/Window System - GLX,AGL,WGL ：前者提供繪圖，後者提供輔助視窗必要的功能。GLUT 則是跨兩者</li>
<li><code>gl.h</code> 一直維持在 OpenGL 1.1 ；因此額外功能需要用 <code>glext.h</code> 去增加。但因為硬體實做不一致，所以該函式庫要作手動連結等。而 <code>glee.h</code> 就是自動處理的函式庫</li>
<li>OpenGL 資料型別自訂浮點數等是因為要跨平台</li>
</ul>


<h2>GLUT and Application</h2>

<ul>
<li>應用結構：主函式中的主迴圈，然後透過事件處理函式去作各功能</li>
<li>應用中都用 GLUT 設定顯示模式（如 RGB）、建立視窗、顯示事件分派函式、鍵盤事件分派函式...最後是呼叫 GLUT 的主迴圈功能</li>
<li>GLUT 做好視窗的建立與模式後，還需要作 OpenGL 本身的設定。包括設定色彩深度與開啟對應狀態等</li>
<li>GLUT 的顯示分派函式是用函式指標註冊進 <code>glutDisplayFunc</code> 中。這部份當有顯示需求時就會被呼叫</li>
<li><code>glutSwapByffers</code>: 前景與背景 Buffer 。後面畫完交換到前面用，也就是繪製與顯示是分開的，除非該 Buffer 被推到前面</li>
<li>要繪製通常是先清除再顯示。因此在其他的函式中作繪圖，若是之後又執行到有清除的函式，就會沒有顯示效果</li>
<li><code>glFlush</code>  是強制把繪圖指令都送出。因為 GPU/CPU 溝通上可能有同步的問題，可能 GPU 還沒畫完 CPU 就在執行下一步了。因此會用這個</li>
<li><code>glBegin</code> 與 <code>glEnd</code> 中間的各指令就是用來畫的繪製區間</li>
<li><code>glutIdleFunc</code> 動畫時可用。因為若是沒有事件，就只有 Idle 事件</li>
<li><code>glutPostRedisplay</code> 則是產生一個事件，注意 Post 。執行後，下次進入主事件迴圈時會有一個待處理的顯示事件，因此動畫就可以順著用顯示的函式處理</li>
</ul>


<h2>Elementary Rendering</h2>

<h3>幾何元件</h3>

<ul>
<li>OpenGL 有支援幾種基本幾何元件</li>
<li>繪製時要注意頂點順序左下開始逆時針</li>
<li><code>glVertex3fv</code> 為例，命名如下

<ul>
<li>gl: OpenGL 前綴</li>
<li>3: 維度，影響有多少參數</li>
<li>f: 傳入資料型別</li>
<li>v: 有的話則是傳入陣列（Vector)</li>
</ul>
</li>
<li>新的寫法不再用 <code>glBegin</code> 等方式描述，而是使用 Buffer 相關的方式</li>
<li>Buffer 化的表示法是用一個叫做 Display List 的概念去存，然後繪圖的時候直接畫出來</li>
</ul>


<hr />

<ul>
<li>可以用一些函式作狀態與特色的設定、開閉等</li>
<li>OpenGL 座標以左下角作零點，所以滑鼠座標可能要反轉</li>
</ul>


<h3>遞迴範例：碎形</h3>

<ul>
<li>以基本三角形的三邊中點作遞迴，做出的三角形繼續作遞迴</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Note: Compiler Design #2]]></title>
    <link href="http://snowmantw.github.com/blog/2012/09/25/note-compiler-design-number-2/"/>
    <updated>2012-09-25T21:57:00+08:00</updated>
    <id>http://snowmantw.github.com/blog/2012/09/25/note-compiler-design-number-2</id>
    <content type="html"><![CDATA[<p><strong>原稿遺失</strong>，補記一些重點</p>

<hr />

<ul>
<li>Lexeme: 語法剖析的元素</li>
<li>語法剖析出來的 Token 代表 key/value ，即是該 Lexeme 屬於那一類 Token ，其值為何</li>
<li>Identifier 就是一大類 Token 。而如 IntegerConstant 那樣，可能會有很多類中有很多種值</li>
<li>Keyword/Reserved Word 差異：前者有先定義但可重載；後者不可重載</li>
</ul>


<hr />

<ul>
<li>Formal Language 就是研究這些 Lexeme 對應到的類別之間關係</li>
<li>單字構成字串，字串符合文法者稱之句子。所有（有可能無限可數）句子構成語言</li>
<li>Formal Language 的規則確保所建構出來的語言，針對任意字串都是可決定其是否為句子的</li>
<li>Regexp 用以從文法建構出句子；而 Compiler 則是從句子辨認出文法</li>
</ul>


<hr />

<ul>
<li>自動狀態機分為確定與不確定。兩者的差異在於其中的狀態移轉，是否存在同輸入而多個可能移轉的狀態</li>
<li>確定的版本，雖然可以允許有多個結束狀態，但一定要在輸入全部使用完畢時達到結束狀態，才算完成</li>
<li>不確定者，其遇到輸入有多個可能移轉時，要「執行」全部可能的移轉。而只要其中一個到達結束狀態時輸入也剛好完畢，就算成功</li>
<li>前者所述，如果其中一個移轉到達結束狀態，但輸入還未完畢，其他可移轉者要繼續移轉</li>
</ul>

]]></content>
  </entry>
  
</feed>
